#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include "gpu.h"
const uint32_t pattNTable = 0x0000;
/* --- Slot 0 */
/* mask 0 */

/* attr 0 */

struct Sprite{
    uint8_t maskC;
    uint8_t mask0[32];
    uint8_t mask1[32];
    uint8_t mask2[32];
    uint8_t attr0[16];
    uint8_t attr1[16];
    uint8_t attr2[16];
};
struct Color{
    uint8_t r;
    uint8_t g;
    uint8_t b;
};
struct Pallete{
    struct Color colors[16];
};

struct Pallete gamePallete = {
    {
    {7,7,7},
    {0,0,0},
    {7,5,1},
    {2,6,3},
    {2,2,7},
    {3,3,7},
    {6,2,2},
    {2,7,7},
    {7,2,2},
    {7,3,3},
    {6,6,2},
    {7,6,4},
    {1,5,1},
    {6,2,5},
    {6,6,6},
    {7,7,7}}
};

struct Sprite playerSprite = {
    3,
    {0x10,0x0C,0x00,0x04,0x01,0x01,0x03,0x03,
    0x03,0x18,0x38,0x20,0x07,0x0D,0x1C,0x18,
    0x00,0x00,0x80,0x00,0x40,0x40,0xE0,0xC0,
    0x80,0x40,0x60,0x20,0x80,0xC0,0xC0,0xE0},

    {0x00,0x00,0x07,0x1B,0x6F,0x0F,0x3C,0x64,
    0x0C,0x07,0x07,0x27,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xE0,0x60,0xE0,0x00,0x00,
    0x00,0x80,0x80,0xA0,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x04,0x04,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,
    0x04,0x04,0x04,0x08,0x04,0x04,0x04,0x0B},

    {0x00,0x00,0x44,0x44,0x44,0x44,0x44,0x44,
    0x43,0x43,0x43,0x43,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};



volatile uint8_t shadowReg[47];
struct GpuReg{
    volatile uint8_t filler;
    volatile uint8_t rwPort;
    uint8_t filler1;
    volatile uint8_t cmdPort;
    uint8_t filler2;
    volatile uint8_t palPort;
};

struct GpuReg* gpu = (struct GpuReg*)0xc00000;
void delay(){
    for(int i=0;i<15500;i++){
     
            gpu->filler=0;
     
    }
}
void writeReg(uint8_t reg, uint8_t value){
    shadowReg[reg] = value;
    gpu->cmdPort = value;
    gpu->cmdPort = reg +0x80;
}
uint8_t readReg(uint8_t reg){
    return shadowReg[reg];
}

void writeVram(uint32_t address,uint8_t data){
    //31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16  15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0

//R14# 00000 a16 a15 a14
    //P1 a7-a0
    //p1 0 1(w) a13-a8
writeReg(14,(address>>14)&0x07);
gpu->cmdPort = address&0xff;
gpu->cmdPort = ((address>>8)&0x3f)|0b01000000;
gpu->rwPort = data;

}
uint8_t readSReg(uint8_t reg){
    writeReg(15,reg&0x0f);
    return gpu->cmdPort;
}

uint8_t readVram(uint32_t address){
    writeReg(14,(address>>14)&0x07);
    gpu->cmdPort = address&0xff;
    gpu->cmdPort = ((address>>8)&0x3f)|0b00000000;
    return gpu->rwPort ;
}
uint8_t readVramNext(){
    return gpu->rwPort;
}
void writeVramNext(uint8_t data){
    gpu->rwPort= data;
}

void outcharScreen(uint8_t c){}
void setPatNameTable(uint32_t address){
    writeReg(2,0x7f&(address>>10));
}



void clearScreen(uint32_t patternNameTable){
    writeVram(patternNameTable,0);
    for(uint32_t i=1;i<54271;i++){
        writeVramNext(0);
    }
}
int foundGpu = 0;
int isGpuPresent(uint32_t address){
    if(!foundGpu){
    gpu = (struct GpuReg*)address;
    writeVram(0x555,0xaa);
    if(readVram(0x555)==0xaa){
        foundGpu = 1;
        return 1;
    }
    }
    return 0;


}

void setupPalletes(){
    for(int i =0;i<16;i++){
            writeReg(16,i);

        gpu->palPort = (gamePallete.colors[i].r<<4)|gamePallete.colors[i].r;
        gpu->palPort = gamePallete.colors[i].r;
    }
}

void setColGenTable(uint32_t address){
    writeReg(3,address>>6);
    writeReg(10,0x7&address>>14);
}



void startGpu(){
    setupPalletes();
    writeReg(0,0b00000100);
    writeReg(1,0b01000011);
    
    
    writeReg(9,0b00000000);
    writeReg(7,0xff);
    writeReg(8,0b00001000);
    setPatNameTable(pattNTable);
    writeReg(7,0xaf);
    writeReg(12,0x0f);
    
    clearScreen(pattNTable);
             writeReg(19,0xe0);


}

void loadBigSprite(uint32_t spGenTable, uint8_t slot,const uint8_t* sprite){
    uint32_t loadAddr = spGenTable + slot*32;
    writeVram(loadAddr,*sprite);
    for(int i = 1;i<32;i++){
        writeVramNext(sprite[i]);
    }
}
void loadColorAttr(uint32_t coltable,uint8_t slot, const uint8_t* attr0){
        uint32_t loadAddr = coltable + slot*16;
        writeVram(loadAddr,*attr0);
        for(int i = 1;i<16;i++){
        writeVramNext(attr0[i]);
    }

}

void setAttribute(uint32_t attTable,uint8_t slot,uint8_t y,uint8_t x,uint8_t sprite){
    uint32_t loadAddr = attTable + slot*4;
    writeVram(loadAddr,y);
    writeVramNext(x);
    writeVramNext(sprite*4);
    writeVramNext(0);
}
volatile uint8_t divider =10;
volatile uint8_t posX = 10;
volatile uint8_t posY = 50;
volatile uint8_t dX = 0;
volatile uint8_t dY = 0;
const uint32_t coltable  = 0x15000;
const uint32_t attable = 0x15000+512;

struct BallParm{
    uint8_t x;
    uint8_t y;
    uint8_t dX;
    uint8_t dY;
}ball;
struct PlayerPaddle{
    uint8_t y;
    uint8_t dY;
} paddle,enemy;

uint16_t getConflictX(){
    uint16_t x;
    x = readSReg(3);
    x = x | ((readSReg(4)&1)<<8);
    return x - 12;
}

uint16_t getConflictY(){
    uint16_t y;
    y = readSReg(5);
    y = y | ((readSReg(6)&3)<<8);
    return y - 8;
}

void limitBall(){
    
    uint8_t reg = readSReg(0)&0x20;
        if(reg){
            uint16_t x = getConflictX();
            if(x<100) {
               if(abs(enemy.dY)>0){
                ball.dY *=2;
                int mod = abs(ball.dY);
                if(mod>5){
                    ball.dY = 5 * (ball.dY/mod);
                }
               }
               ball.dX = 2;
            }
            else {
                if(abs(paddle.dY)>0){
                ball.dY *=2;
               }
                ball.dX = -2;}
            
        }else{
            if(ball.x<1){
                
                ball.x = 100;
                ball.y = 100;
                ball.dX = 2;
                ball.dY = 1;
                printf("Player scored!");
                
            }
            else if(ball.x>245){
                
                ball.x = 100;
                ball.y = 100;
                ball.dX = -2;
                ball.dY = 1;
                printf("Cpu scored!");
            }
            if(ball.y<2||ball.y>200){
                ball.y = 2;
                ball.dY*=-1;}
            else if(ball.y>180){
                ball.y = 180;
                ball.dY*=-1;}
            
        }
}

void updateEnemy(){
    if(ball.x<100){
        if(enemy.y>ball.y)enemy.dY=-1;
        else if(enemy.y<ball.y)enemy.dY=1;
        else enemy.dY=0;
    }else{
        if(enemy.y<172/2)enemy.dY=1;
        else if(enemy.y>172/2)enemy.dY=-1;
        else
        enemy.dY=0;
    }
    enemy.y += enemy.dY;
    if(enemy.y>172)enemy.y=172;

}
void setHScroll(uint16_t scroll){
    scroll = scroll^7;
    writeReg(26,(scroll>>3)&0x3f);
    writeReg(27,(0x7&scroll));
    printf("R26: %d R27: %d\n",(scroll>>2)&0x3f,7-(0x7&scroll));
}
void setVScroll(uint8_t scroll){
    writeReg(23,scroll);
}
void gpuInt(){
    writeReg(19,0xe0);
    return;
        divider--;
        if(divider==0){
        divider = 2;
        ball.y += ball.dY;
        ball.x += ball.dX;
        //setHScroll(ball.x);
        //setVScroll(ball.y);
        }
        posX+=dX;
        posY+=dY;
        limitBall();
        updateEnemy();
        
        setAttribute(attable,0,ball.y,ball.x,0);
        
        
        
        setAttribute(attable,1,enemy.y-8,10,1);



        setAttribute(attable,2,paddle.y,240,1);
        
        
        if(paddle.y<=1){ 
            paddle.y = 2;
            paddle.dY=0;
        }

        if(paddle.y>=172){ 
            paddle.y = 171;
            paddle.dY=0;
        }
        paddle.y += paddle.dY;
        paddle.dY=0;
         

}
volatile  char *const UART_SRA = (volatile char *const) 0x800003;
volatile  char *const UART_TBD = (volatile char *const) 0x800007;

uint8_t hasChar(){
    return *UART_SRA&0b1;
}
char inChar(){
	return *UART_TBD;
}
void loadSprite(uint8_t slot,struct Sprite* sprite){
    loadBigSprite(0x10000,slot,sprite->mask0);
    loadColorAttr(coltable,slot,sprite->mask0);
    if(sprite->maskC>0){
        loadBigSprite(0x10000,slot+1,sprite->mask1);
        loadColorAttr(coltable,slot+1,sprite->attr1);
    }
    if(sprite->maskC>1){
        loadBigSprite(0x10000,slot+2,sprite->mask2);
        loadColorAttr(coltable,slot+2,sprite->attr2);
    }
}


int main(){
    setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stdin, NULL, _IONBF, 0);
    ball.x = 100;
    ball.y = 100;
    ball.dX = 2;
    ball.dY = 1;
    enemy.y = 50;
    enemy.dY = 0;
    startGpu();
    writeReg(25,0b00000011);
    //sprite gen table 
    writeReg(6,(0x10000>>11)&0x3f);
    



    //sprite attr table
    writeReg(5,(coltable>>7)|7);
    writeReg(11,(coltable>>15)&3);
    
    loadSprite(0,&playerSprite);
    

    for(int index = 0;index<32;index++){
        writeVram(attable+(index*4),209);
        writeVramNext(0);
        writeVramNext(0);
        writeVramNext(0);
    }
    uint8_t x = 0;
    uint8_t y = 0;
    writeReg(0,0b00011110);
    uint16_t scroll1=0;
    uint16_t scroll2=0;
    while(1){
        setupPalletes();
        //printf("Hello World!",errno);
        if(hasChar()){
        char c = inChar();
        switch (c)
        {
        case 'a':
            x--;
            break;
        case 'd':
            x++;
            break;
        case 'z':
            scroll2-=1;
            setHScroll(scroll1);
            break;
        case 'c':
            scroll2+=1;
            setHScroll(scroll1);
            break;    
        case 'w':
            y--;
            paddle.dY=-4;
            
            break;
        case 's':
            y++;
            paddle.dY=4;
            break;
        default:
            break;
        }
        

        setAttribute(attable,0,y,x,0);
        setAttribute(attable,1,y,x,1);
        setAttribute(attable,2,y,x,2);

        printf("",errno);
        
        }
    }
}

